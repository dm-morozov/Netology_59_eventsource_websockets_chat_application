import { User, Message } from "./types";

export default class ChatUI {
  private modal: HTMLDivElement | null;
  private nicknameInput: HTMLInputElement | null;
  private modalLoginBtn: HTMLButtonElement | null;
  private errorText: HTMLParagraphElement | null;

  private chatContainer: HTMLDivElement | null;
  private usersList: HTMLUListElement | null;
  private messagesBox: HTMLDivElement | null;
  private chatForm: HTMLFormElement | null;
  private chatInput: HTMLInputElement | null;

  constructor() {
    this.modal = document.querySelector("#modal") as HTMLDivElement;
    this.nicknameInput = document.querySelector(
      "#nickname",
    ) as HTMLInputElement;
    this.modalLoginBtn = document.querySelector(
      "#modal-login-btn",
    ) as HTMLButtonElement;
    this.errorText = document.querySelector(
      "#modal-error",
    ) as HTMLParagraphElement;

    this.chatContainer = document.querySelector(
      "#chat-container",
    ) as HTMLDivElement;
    this.usersList = document.querySelector("#users-list") as HTMLUListElement;
    this.messagesBox = document.querySelector(
      "#messages-box",
    ) as HTMLDivElement;
    this.chatForm = document.querySelector("#chat-form") as HTMLFormElement;
    this.chatInput = document.querySelector("#chat-input") as HTMLInputElement;
  }

  // --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –∏ —á–∞—Ç–æ–º ---

  // –°–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–∞—Ç
  public showChat(): void {
    if (this.modal) {
      this.modal.classList.add("hidden");
    }
    if (this.chatContainer) {
      this.chatContainer.classList.remove("hidden");
    }
  }

  // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  public showNicknameError(message: string): void {
    if (this.errorText) {
      this.errorText.textContent = message;
      this.errorText.classList.remove("visible");
    }
  }

  // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ—à–∏–±–∫—É –µ—â–µ –æ—á–∏—Å—Ç–µ—Ç—å –∏ —Å–∫—Ä—ã—Ç—å
  public clearNicknameError(): void {
    if (this.errorText) {
      this.errorText.textContent = "";
      this.errorText.classList.add("visible");
    }
  }

  // –¢–µ–ø–µ—Ä—å —É–±–µ—Ä–µ–º —É –ò–º–µ–Ω–∏ –ª–∏—à–Ω–∏–∫ –ø—Ä–æ–±–µ–ª–ª—ã –∏ –≤–µ—Ä–Ω–µ–º
  public getNickname(): string {
    return this.nicknameInput?.value.trim() || "";
  }

  // --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---

  public renderUserList(users: User[], currentUser: User): void {
    if (!this.usersList) return;

    this.usersList.innerHTML = "";

    users.forEach((user) => {
      const li = document.createElement("li");
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–∫—É—â–∏–º
      const isCurrentUser = user.id === currentUser.id;

      // –∏ –µ—Å–ª–∏ —è–≤–ª—è–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å current-user
      if (isCurrentUser) {
        li.textContent = "You";
        li.classList.add("current-user");
      } else {
        li.textContent = user.name;
        li.classList.add("other-user");
      }

      this.usersList?.append(li);
    });
  }

  public renderMessage(message: Message, currentUser: User): void {
    if (!this.messagesBox) return;

    const messageElement = document.createElement("div");
    messageElement.classList.add("message");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø. –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ send, –∏–Ω–∞—á–µ exit

    if (message.type === "send") {
      // –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
      // –î–ª—è —ç—Ç–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞—à–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ –Ω–∞—à–µ.
      const isCurrentUser = message.user.id === currentUser.id;

      if (isCurrentUser) {
        messageElement.classList.add("my-message");
      } else {
        messageElement.classList.add("other-message");
      }

      // –°–æ–±–∏—Ä–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const userName = isCurrentUser ? "You" : message.user.name;
      const time = new Date().toLocaleDateString();

      // –¢–∞–∫ –∫–∞–∫ –ø–æ –∑–∞–¥–∞–Ω–∏—é —Å—Ç–æ–∏—Ç:
      // export interface SendMessage {
      //   type: "send";
      //   user: User;
      //   message: string;
      // }
      const messageText = message.message;

      messageElement.innerHTML = `
        <div class="message-info">
          <span class="message-username">${userName}</span>
          <span class="message-time">${time}</span>
        </div>
        <div class="message-text">${messageText}</div>
      `;
    } else if (message.type === "exit") {
      messageElement.classList.add("system-message");
      const time = new Date().toLocaleTimeString();
      messageElement.innerHTML = `
        <div class="message-info">
          <span class="message-time">${time}</span>
        </div>
        <div class="message-text">üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.user.name} –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞</div>
      `;
    }

    // –î–∞–π –±–æ–≥ –≤—Å–µ —Å–æ–±—Ä–∞–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∏ÃÜ–Ω–µ—Ä
    this.messagesBox?.append(messageElement);
    // –¥–æ–±–∞–≤–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª,
    // —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –±—ã–ª–æ –≤–Ω–∏–∑—É
    this.messagesBox.scrollTop = this.messagesBox.scrollHeight;
  }
}
